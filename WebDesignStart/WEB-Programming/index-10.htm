<html><head><META http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>Internet Programming school</title><meta content="text/html; charset=windows-1251" http-equiv="Content-Type"><link href="lesson.css" tppabs="http://ips.ifmo.ru/css/lesson.css" type="text/css" rel="stylesheet"><link href="style.css" tppabs="http://ips.ifmo.ru/css/style.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="../../../../js/upmenu.js" language="JavaScript"> </script><script type="text/javascript" src="../../../../js/popupmenu.js" language="JavaScript"> </script><script type="text/javascript" src="../../../../js/tree.js" language="JavaScript"> </script></head><body marginwidth="0" marginheight="0" topmargin="0" leftmargin="0" bgcolor="#ffffff"><table cellspacing="0" cellpadding="0" height="100%" width="100%"><tr><td><table width="100%"><tbody><tr><td height="59"><img src="logo.gif" tppabs="http://ips.ifmo.ru/img/logo.gif" width="310" height="45"></td><td align="right"><a href="javascript:if(confirm('http://ips.ifmo.ru/personal/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/personal/'" tppabs="http://ips.ifmo.ru/personal/" class="up">Вход</a><span> | </span><a href="javascript:if(confirm('http://ips.ifmo.ru/main/siteabout/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/main/siteabout/'" tppabs="http://ips.ifmo.ru/main/siteabout/" class="up">Карта сайта</a><span> | </span><a href="javascript:if(confirm('http://ips.ifmo.ru/about/contacts/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/about/contacts/'" tppabs="http://ips.ifmo.ru/about/contacts/" class="up">Контакты</a></td></tr></tbody></table></td></tr><tr><td><table border="0" width="100%" cellPadding="0" cellSpacing="0"><tbody><tr><td align="right" height="1" colspan="2"><img src="menu13.gif" tppabs="http://ips.ifmo.ru/img/menu13.gif"></td></tr><tr bgcolor="#000934"><td><img src="menu21.gif" tppabs="http://ips.ifmo.ru/img/menu21.gif" width="267" height="36"></td><td align="right"><img src="menu23.gif" tppabs="http://ips.ifmo.ru/img/menu23.gif" width="512" height="36"></td></tr><tr bgColor="#a45ad5"><td background="menu_back.gif" tppabs="http://ips.ifmo.ru/img/menu_back.gif" class="menu" height="24" colSpan="2">&nbsp;<a title="Главная" href="javascript:if(confirm('http://ips.ifmo.ru/main/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/main/'" tppabs="http://ips.ifmo.ru/main/">ГЛАВНАЯ</a>&nbsp;&nbsp;<a title="О проекте" href="javascript:if(confirm('http://ips.ifmo.ru/about/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/about/'" tppabs="http://ips.ifmo.ru/about/">О ПРОЕКТЕ</a>&nbsp;&nbsp;<a title="Академия программирования" href="javascript:if(confirm('http://ips.ifmo.ru/academy/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/academy/'" tppabs="http://ips.ifmo.ru/academy/">АКАДЕМИЯ ПРОГРАММИРОВАНИЯ</a>&nbsp;&nbsp;<a title="Учебные курсы" href="javascript:if(confirm('http://ips.ifmo.ru/courses/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/courses/'" tppabs="http://ips.ifmo.ru/courses/"><font color="yellow">УЧЕБНЫЕ КУРСЫ</font></a>&nbsp;&nbsp;<a title="Об олимпиадах" href="javascript:if(confirm('http://ips.ifmo.ru/olymp/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/olymp/'" tppabs="http://ips.ifmo.ru/olymp/">ОЛИМПИАДЫ</a>&nbsp;&nbsp;<a title="Персональная страница" href="javascript:if(confirm('http://ips.ifmo.ru/personal/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ips.ifmo.ru/personal/'" tppabs="http://ips.ifmo.ru/personal/">МОЙ IPS</a>&nbsp;&nbsp;</td></tr><tr bgcolor="#000934"><td></td><td align="right"><img src="menu33.gif" tppabs="http://ips.ifmo.ru/img/menu33.gif" width="512" height="5"></td></tr><tr bgcolor="#E2D3F5"><td></td><td align="right"><img src="menu43_.gif" tppabs="http://ips.ifmo.ru/img/menu43_.gif" width="512" height="6"></td></tr></tbody></table></td></tr><tr><td height="100%"><table height="100%" width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="194" class="lmenu" valign="top"><table class="lmenu" border="0" width="194"><tbody><tr><td width="10"></td><td width="10"></td><td width="10"></td><td width="100%"></td></tr><tr><td width="10" valign="top"><img onclick="DisplayBranch('webprog/')" src="r_bull.gif" tppabs="http://ips.ifmo.ru/img/r_bull.gif" height="11"></td><td colspan="3" class="lmenuw"><a title="Клиентское Web-программирование" class="lmenu1" href="index.htm" tppabs="http://ips.ifmo.ru/courses/webprog/">Курс III</a></td></tr><tr><td colspan="4"><div show="true" id="webprog/"><table class="lmenu" width="100%"><tr><td width="10"></td><td width="10"></td><td width="10"></td><td width="100%"></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/ann/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="2"><a title=" " class="lmenu2" href="index-1.htm" tppabs="http://ips.ifmo.ru/courses/webprog/ann/">Аннотация</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="2" class="lmenuw"><a title="Язык сценариев JavaScript" class="lmenu2" href="index-2.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/">Часть I</a></td></tr><tr><td colspan="4"><div show="true" id="webprog/part1/"><table class="lmenu" width="100%"><tr><td width="10"></td><td width="10"></td><td width="10"></td><td width="100%"></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l1/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Модель клиент-сервер в Интернете" class="lmenu3" href="index-3.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l1/">Урок 1</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l2/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Сценарии JavaScript в документах HTML" class="lmenu3" href="index-4.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l2/">Урок 2</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l3/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Переменные и литералы" class="lmenu3" href="index-5.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l3/">Урок 3</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l4/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Выражения и операции" class="lmenu3" href="index-6.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l4/">Урок 4</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l5/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Операторы" class="lmenu3" href="index-7.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l5/">Урок 5</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l6/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Функции" class="lmenu3" href="index-8.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l6/">Урок 6</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l7/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Встроенные объекты (1)" class="lmenu3" href="index-9.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l7/">Урок 7</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l8/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1" class="lmenuw">Урок 8</td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part1/l9/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Создание собственных объектов" class="lmenu3" href="index-11.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l9/">Урок 9</a></td></tr></table></div></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part2/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="2"><a title="Среда клиента" class="lmenu2" href="index-12.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part2/">Часть II</a></td></tr><tr><td colspan="4"><div show="" id="webprog/part2/"><table class="lmenu" width="100%"><tr><td width="10"></td><td width="10"></td><td width="10"></td><td width="100%"></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part2/l1/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Объектная модель MS Internet Explorer" class="lmenu3" href="index-13.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part2/l1/">Урок 10</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part2/l2/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Объекты доступа к странице и ее элементам" class="lmenu3" href="index-14.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part2/l2/">Урок 11</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part2/l3/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Обработка событий в MS Internet Explorer" class="lmenu3" href="index-15.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part2/l3/">Урок 12</a></td></tr></table></div></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part3/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="2"><a title="Динамический HTML" class="lmenu2" href="index-16.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part3/">Часть III</a></td></tr><tr><td colspan="4"><div show="" id="webprog/part3/"><table class="lmenu" width="100%"><tr><td width="10"></td><td width="10"></td><td width="10"></td><td width="100%"></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part3/l1/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Объектная модель документа DHTML" class="lmenu3" href="index-17.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part3/l1/">Урок 13</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part3/l2/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Примеры динамических страниц HTML" class="lmenu3" href="index-18.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part3/l2/">Урок 14</a></td></tr><tr><td>&nbsp;&nbsp;&nbsp;</td><td>&nbsp;&nbsp;&nbsp;</td><td width="10" valign="top"><img onclick="DisplayBranch('webprog/part3/l3/')" src="w_bull.gif" tppabs="http://ips.ifmo.ru/img/w_bull.gif" height="11"></td><td colspan="1"><a title="Объектная модель документа DOM" class="lmenu3" href="index-19.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part3/l3/">Урок 15</a></td></tr></table></div></td></tr></table></div></td></tr></tbody></table><br><br><br><table align="center"><tbody><tr><td><a href="javascript:if(confirm('http://www.ifmo.ru/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.ifmo.ru/'" tppabs="http://www.ifmo.ru/" title="Institute of fine mechanics and optics"><img border="0" src="ifmo.gif" tppabs="http://ips.ifmo.ru/img/ifmo.gif" height="29" width="64"></a></td></tr></tbody></table></td><td height="100%" valign="top"><table class="body"><tr><td><p class="link"><a href="index.htm" tppabs="http://ips.ifmo.ru/courses/webprog/" class="up">Клиентское Web-программирование</a>&nbsp;&raquo;&nbsp;<a href="index-2.htm" tppabs="http://ips.ifmo.ru/courses/webprog/part1/" class="up">Часть I</a>&nbsp;&raquo;&nbsp;Урок 8</p><p class="header">Встроенные объекты (2)</p><a name=""></a><h2> Объект Object </h2><p> Расположен во главе всей иерархии объектов JavaScript. Любой объект JavaScript является наследует все его свойства и методы. Для создания объекта <tt>Object</tt> используется конструктор <tt>Object()</tt> с единственным необязательным параметром: </p><dir><pre>
var obj = new Object([значение])
  </pre></dir><p> Если параметр конструктора не задан, то создается объект без значения. Если же он задан, то может быть любым из поддерживаемых JavaScript типов данных - числовым, булевым или строковым. Если этот параметр является объектом, то возвращается неизмененным этот же объект (свойство constructor возвращает ссылку на конструктор объекта, а вот операция typeof будет возвращать строку "object", а не строку с типом объекта-параметра). Значения <tt>null</tt> и <tt>undefined</tt> этого параметра приводят к созданию объекта без содержимого. </p><table cellspacing="0" cellpadding="2" border="1">
       Свойства объекта Object
    <tr align="center"><td align="left"><tt>constructor</tt></td><td align="left">Хранит ссылку на функцию-конструктор, с помощью которой создан экземпляр объекта.</td></tr><tr align="center"><td align="left"><tt>prototype </tt></td><td align="left">Возвращает ссылку на прототип класса объектов. Изменять прототип встроенных объектов нельзя, тогда как пользовательских можно. Это свойство "класса", а не экземпляра, поэтому оно применяется не к экземпляру объекта, а к его конструктору <tt>Object</tt>. </td></tr><tr align="center"><td align="left"><tt>propertyIsEnumerable(имя)</tt></td><td align="left">Логическое свойство, возвращающее <tt>true</tt>, если указанное в качестве параметра свойство объекта существует и доступно при переборе свойств в цикле <tt>for...in</tt>.</td></tr></table><br><p> Используя свойство <tt>constructor</tt>, которое наследуется также и всеми объектами JavaScript, можно проверить его принадлежность классу объектов. Сравнивать значение этого свойства надо с конструктором соответствующего объекта (просто имя конструктора). Для пользовательского объекта этим именем является имя соответствующей функции-конструктора (см. урок 9), а для встроенных объектов следующие ключевые слова - <tt>String, Date, Function,
    Array, Boolean, Number, Object</tt>: </p><dir><pre>
var str = "xxxxxx";
var obj = new Object();
(str.constructor == String) ? true : false; // true
(obj.constructor == String) ? true : false; // false
(obj.constructor == Object) ? true : false; // true
  </pre></dir><p> Свойство <tt>prototype</tt> позволяет добавлять свойства и методы к "классу" объектов. Оно наследуется также каждым объектом JavaScript (пользовательским или встроенным кроме объектов <tt>Global</tt> и <tt>Math</tt>). После добавления свойств и методов к прототипу создание объектов этого класса приводит к тому, что у всех объектов будут существовать добавленные свойства и методы. Так как все объекты "происходят" от объекта <tt>Object</tt>, то добавление свойств и методов к его прототипу приводит к созданию соответствующих свойств и методов у всех объектов JavaScript. </p><a name="example10"></a><table class="example"><caption>Пример #1.  Добавление свойств и методов ко всем объектам </caption><tr><td colspan="2"><p> Добавим к прототипу объекта <tt>Object</tt> метод, возвращающий строку с названиями и значениями всех свойств объекта. </p><p> Для этого прежде всего создадим функцию <tt>props()</tt>, выполняющую указанное действие. В JavaScript есть специальный цикл <tt>for...in</tt>, который предназначен для просмотра всех свойств объекта (встроенного или пользовательского). На каждом шаге цикла его переменная хранит имя свойства, а доступ к значению этого свойства можно получить, выполнив для объекта операцию индексации со строковым индексом, равным имени свойства. Например, к свойству constructor объекта <tt>obj</tt> класса <tt>Object</tt> можно обратиться не только с использованием точечной нотации <tt>obj.constructor</tt>, но и с помощью индекса <tt>"constructor"</tt> следующим образом <tt>obj["constructor"]</tt>. (Это справедливо для любого объекта JavaScript.) </p><dir><pre>
function props() {
  var s = ""
  for(var i in this){
     s += i + ': ' + this[i] + '&lt;br&gt;';
  }
return s;
}
       </pre></dir><p> Здесь следует, забегая вперед, пояснить использование ключевого слова <tt>this</tt> в функциях JavaScript. Оно используется исключительно в функциях, реализующих методы объектов, и имеет смысл "этот объект". Когда добавляется новый метод к прототипу встроенного объекта, то в реализующей его функции следует каким-то образом ссылаться на экземпляр объекта, который впоследствии будет создан. Именно ключевое слово <tt>this</tt> и реализует эту функциональность. Поэтому в нашей функции <tt>props()</tt> цикл будет осуществляться по всем свойствам экземпляра объекта, ассоциированный с этой функцией метод которого будет вызываться. А конструкция <tt>this[i]</tt> будет возвращать значение очередного свойства этого объекта. </p><p> Теперь остается добавить новое свойство к прототипу объектов класса  <tt>Object</tt>. Назовем его <tt>propList</tt> и присвоим ему ссылку на функцию <tt>props()</tt>: </p><dir><pre>
Object.prototype.propList = props;
        </pre></dir><p> Обращаем внимание, что присваивается ссылка <tt>props</tt> на объект <tt>Function</tt>, а не вызов функции <tt>props()</tt>! </p><p> Создадим объект <tt>String</tt>: </p><dir><pre>
var s = "*********";
        </pre></dir><p> Теперь он имеет метод <tt>propList()</tt>, и следующий оператор распечатает все свойства объекта <tt>s</tt> с их значениями в окне браузера: </p><dir><pre>
document.write(s.propList())
        </pre></dir><p> <strong>Внимание!</strong> Метод <tt>propList()</tt> вызывается как обычная функция. Если бы для выполнения реализующей его функции <tt>props()</tt> требовались параметры, то их следовало бы передать при вызове метода <tt>propList()</tt> объекта <tt>s</tt>. </p></td></tr></table><p> Не все свойства объектов могут быть перечислены в цикле <tt>for...in</tt>. Для проверки доступности свойства в указанном цикле у объекта <tt>Object</tt> (и, естественно, у всех объектов JavaScript) есть логическое свойство <tt>propertyIsEnumerable(имя)</tt>, определяющее доступность свойства в цикле <tt>for...in</tt>. Имя свойства передается как строка. Исключение - свойства массива, представляющие собой индексы эго элементов. В этом случае имя может быть передано в свойство <tt>propertyIsEnumerable</tt> как число, и как строка, содержащая число. Заметим, что все добавляемые пользователем к встроенным объектам свойства являются перечисляемые, тогда как их собственные встроенные свойства не все могут быть перечисляемыми. </p><table cellspacing="0" border="0">
     Методы объекта Object
   <tr align="center"><td><tt>toString</tt></td><td>Возвращает строку, представляющую заданный объект.</td></tr><tr align="center"><td><tt>valueOf</tt></td><td>Возвращает примитивное значение заданного объекта.</td></tr></table><br><a name=""></a><h2> Стандартные функции верхнего уровня (объект Global) </h2><p> Объект <tt>Global</tt> создается автоматически и все его свойства и методы доступны как свойств и методы класса с одним исключением - не надо указывать имя класса, более того в JavaScript классическая конструкция вызова или обращения к свойству класса, например <tt>Global.Infinity</tt>, приведет к ошибке во время выполнения. </p><table cellspacing="0" cellpadding="2" border="1">
       Свойства объекта Global
     <tr align="center"><td align="left"><tt>Infinity</tt></td><td align="left">Специальное числовое значение, эквивалентное бесконечности. </td></tr><tr align="center"><td align="left"><tt>NaN</tt></td><td align="left">Специальное числовое значение, соответствующее "не числу".</td></tr><tr align="center"><td align="left"><tt>undefined</tt></td><td align="left"> Неопределенное значение, которое имеет любая объявленная оператором <tt>var</tt> переменная пока ей не было присвоено никакого значения.  </td></tr></table><br><table cellspacing="0" cellpadding="2" border="1">
        Методы объекта Global
      <tr align="center"><td align="left"><tt>parseFloat(строка)</tt></td><td align="left"> Анализирует значение переданного ей строкового параметра на соответствие представлению вещественного числа в JavaScript. Если в строке при последовательном просмотре обнаруживается символ, отличный от символов, применяемых для формирования вещественных литералов (знаки <tt>+</tt> и <tt>-</tt>, десятичные цифры, точка и символы (<tt>е</tt>) или (<tt>Е</tt>)), то она игнорирует оставшуюся часть строки и возвращает то числовое значение, которое ею обнаружено до неправильного символа. Если первый символ в строке не является цифрой, она возвращает значение <tt>NaN</tt>. </td></tr><tr align="center"><td align="left"><tt>parseInt(строка, [основание])</tt></td><td align="left"> Пытается выделить из строки, начиная с первого символа, целое число по заданному вторым параметром основанию. Если первый символ в строке не является цифрой, соответствующей системе с основанием, указанным вторым параметром, она также возвращает значение <tt>NaN</tt>. </td></tr><tr align="center"><td align="left"><tt>isNaN(параметр)</tt></td><td align="left"> Тестирует значение своего параметра на соответствие нечисловому значению. Если ее параметр действительно оказывается не числом, она возвращает <tt>true</tt>, в противном случае <tt>false</tt>. </td></tr><tr align="center"><td align="left"><tt>isFinite(значение)</tt></td><td align="left"> Определяет, является ли указанное значение конечным числом. Если значение не равно положительной или отрицательной бесконечности и не является <tt>NaN</tt>, то этот метод возвращает <tt>true.</tt></td></tr><tr align="center"><td align="left"><tt>eval(строка)</tt></td><td align="left"> Анализирует содержание строки и выполняет содержащийся в ней код JavaScript. Обеспечивает возможность динамического выполнения кода. </td></tr><tr align="center"><td align="left"><tt>escape(строка)</tt></td><td align="left"> Кодирует строку в формат Unicode, преобразуя все пробелы, знаки препинания, символы с надстрочными знаками и некоторые другие символы в <tt>%xx</tt> (<tt>хх</tt> является шестнадцатеричным номер символа в таблице кодов ASCII), символы с номером больше 255 преобразуются в <tt>%uxxxx</tt>, где <tt>xxxx</tt> является кодом символа в формате Unicode. </td></tr><tr align="center"><td align="left"><tt>unescape(строка)</tt></td><td align="left"> Декодирует строку, закодированную функцией escape. </td></tr><tr align="center"><td align="left"><tt>encodeURI(URIстрока)</tt></td><td align="left"> Кодирует текстовую строку таким образом, чтобы она представляла собой адрес URI, который можно передавать по сети в запросе к серверу (выполняет так называемое URL-кодирование). Символы <tt>:</tt>,  <tt>;</tt>, <tt>/</tt> и <tt>?</tt> не кодируются. </td></tr><tr align="center"><td align="left"><tt>decodeURI(URIстрока)</tt></td><td align="left"> Декодирует строку, закодированную функцией <tt>encodeURI</tt>. </td></tr><tr align="center"><td align="left"><tt>encodeURIComponent(URIстрока)</tt></td><td align="left"> В отличие от <tt>encodeURI</tt> кодирует и символы, используемые в адресе URI, т. е. выполняет полное URL-кодирование адреса, включая символы <tt>:</tt>, <tt>;</tt>, <tt>/</tt> и <tt>?</tt>. </td></tr><tr align="center"><td align="left"><tt>decodeURIComponent(URIстрока)</tt></td><td align="left"> Декодирует строку, закодированную функцией <tt>encodeURIComponent</tt>. </td></tr></table><br><p> Функции <tt>parseFloat()</tt> и <tt>parseInt()</tt> полезны для преобразования в числовые значения данных, вводимых пользователем в текстовых полях формы, а также для преобразования значений свойств каскадных таблиц стилей элементов, если они используются в вычислениях, так как эти большинство числовых значений этих свойств хранятся в виде строки, содержащей число с размерностью, например, "100px". </p><p> Функция <tt>eval()</tt> полезна, когда, например, пользователь вводит в сценарий строку, представляющую код JavaScript, и ее следует интерпретировать в сценарии (см. упражнение 6). </p><p> Функции <tt>escape()</tt> и <tt>unescape()</tt> нельзя использовать для URL-кодирования и декодирования строки запроса клиента. Для этих целей следует использовать функции <tt>encodeURI()</tt> и <tt>decodeURI()</tt>, а также <tt>encodeURIComponent()</tt> и <tt>decodeURIComponent()</tt> (см. упражнение 7). </p><a name=""></a><h2> Манипулирование объектами </h2><p> Для работы с объектами в JavaScript предназначены два оператора. С одним из них мы познакомились в примере 10 - цикл по свойствам объекта: </p><dir><pre>
for( переменная_цикла in объект) {
    [операторы]
}
   </pre></dir><p> Этот цикл осуществляет перебор всех свойств объекта. В переменной цикла на каждой итерации сохраняется название свойства объекта. Значение свойства объекта можно получить с помощью конструкции </p><dir><pre>
объект[имя_свойства]
   </pre></dir><p> Количество итераций равно количеству перечисляемых свойств, существующих у заданного в заголовке цикла объекта. </p><a name="example11"></a><table class="example"><caption>Пример #2.  Перечисление свойства объекта HTML </caption><tr><td colspan="2"><p> Для обеспечения возможности доступа в сценарии к элементу HTML отображаемого в браузере документа с помощью объекта в язык HTML была добавлена возможность идентификации любого элемента страницы с помощью атрибута <tt>id</tt>. Его значением является алфавитно-цифровой идентификатор, начинающийся с буквы. По этому имени в сценарии JavaScript можно получить ссылку на объект, соответствующий указанному элементу HTML. В Internet Explorer для этого достаточно указать это имя и автоматически ссылка будет получена. После чего можно получать или изменять значения свойств этого объекта, обычно соответствующих атрибутам элемента HTML, соответствующего этому объекту. Однако у всех объектов есть свойства, которые не соответствуют никаким атрибутам. Эти свойства реализованы в соответствии с используемой в браузере объектной моделью документа. </p><p> В представленном ниже сценарии при щелчке на кнопке Свойства абзаца вызывается функция <tt>properties()</tt>, в которую передается ссылка на объект <tt>par1</tt>, соответствующий абзацу страницы HTML. Эта функция возвращает строку с названиями и значениями всех свойств объекта, соответствующего абзацу с атрибутом <tt>id=par1</tt>, которая отображается на странице HTML. </p><dir><pre>
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE="JaVaSCRipt"&gt;
&lt;!--
function properties(obj) {
     var result = ""
     for (var i in obj) {
         result += obj.id + "." +
                   i + " = " + obj[i] + "&lt;BR&gt;"
     }
     result += "&lt;HR&gt;"
     return result
}
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;p id="par1"&gt;
Получить в сценарии доступ к объекту, соответствующему
какому-нибудь элементу HTML страницы, можно с помощью
значений его атрибутов &lt;b&gt;id&lt;/b&gt; или &lt;b&gt;name&lt;/b&gt;.
&lt;/p&gt;
&lt;input type=button value="Свойства абзаца"
       onclick="document.write(properties(par1))"&gt;
&lt;/BODY&gt;
    </pre></dir></td></tr></table><p> Второй оператор, предназначенный для работы с объектами, - оператор <tt>with</tt>, позволяющий задать объект по умолчанию для блока операторов, определенных в его теле. Это означает, что все встречаемые в операторах этого блока свойства и методы являются свойствами и методами указанного объекта. Применение этого оператора избавляет от необходимости указывать иерархию принадлежности объекта и сокращает исходный текст программы. </p><p> Текст приведенного выше сценария с использованием оператора <tt>with</tt> можно записать и так: </p><dir><pre>
with( obj) {
    result += id + "." +
              i + " = " + [i] + "&lt;BR&gt;"
}
  </pre></dir><p> Полезно использовать этот оператор для объекта <tt>Math</tt>. Тогда обращение к его свойствам и методам осуществляется без явного указания префикса <tt>Math</tt>. Например: </p><dir><pre>
with(Math) {
r = sin(2.0) // Вычисление синуса
l = 2*PI*r // Вычисление длины окружности
}
  </pre></dir><a name=""></a><h2> Обработка ошибок </h2><p> При выполнении сценария могут возникать ошибки. Браузер Internet Explorer отображает их либо в диалоговом окне: </p><a name="ris1"><table align="center" class="figure" width="100%"><tr><td align="center"><img src="img1-1.gif" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l8/img1.gif"></td></tr><tr align="center"><td>Рис. 1.</td></tr></table></a><p> Это окно появляется тогда, когда в браузере установлен режим уведомления об ошибках сценария и запрещена их отладка на вкладке Дополнительно окна его свойств: </p><a name="ris2"><table align="center" class="figure" width="100%"><tr><td align="center"><img src="img2.gif" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l8/img2.gif"></td></tr><tr align="center"><td>Рис. 2.</td></tr></table></a><p> Если в этом окне сброшен флажок Запретить отладку сценариев, то появляется диалоговое окно следующего вида, предлагающее выполнить отладку сценария с помощью какой-либо специальной программы: </p><a name="ris3"><table align="center" class="figure" width="100%"><tr><td align="center"><img src="img3.gif" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l8/img3.gif"></td></tr><tr align="center"><td>Рис. 3.</td></tr></table></a><p> Если ответить <strong>Да</strong>, то браузер предложит в диалоговом окне Just-In-Time Debugging выбрать программу отладки: </p><a name="ris4"><table align="center" class="figure" width="100%"><tr><td align="center"><img src="img3.gif" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l8/img3.gif"></td></tr><tr align="center"><td>Рис. 4.</td></tr></table></a><p> Возможна ситуация, когда в сценарии потребуется перехватить непредвиденные ошибки, возникающие во время выполнения, дабы предотвратить появление диалогового окна об ошибке. Для этого в JavaScript имеется достаточно простой механизм, реализуемый оператором <tt>try...catch...finally</tt>: </p><dir><pre>
try{
// Код, в котором могут содержаться ошибки
}
catch(e){
// Обработчик ошибки
}
finally{
// всегда выполняемый код
}
   </pre></dir><p> Код сценария с потенциальными ошибками заключается в блок <tt>try</tt>. Если при выполнении кода возникают ошибки, то диалоговое окно браузера не появляется, а управление передается блоку <tt>catch</tt>, в котором и обрабатываются все ошибки. Переменная <tt>е</tt> (произвольный идентификатор) в блоке <tt>catch</tt> будет содержать ссылку на объект <tt>Error</tt>, хранящий информацию об ошибке. Код блока <tt>finally</tt> выполняется всегда - возникла или не возникла ошибка. </p><p> У объекта <tt>Error</tt> имеется четыре свойства: </p><table cellspacing="0" cellpadding="2" border="1"><tr align="center"><th>Свойство</th><th>Описание</th></tr><tr align="center"><td align="left"><tt>name</tt></td><td align="left">Название ошибки (только чтение).</td></tr><tr align="center"><td align="left"><tt>message</tt></td><td align="left">Сообщение ошибки (только чтение).</td></tr><tr align="center"><td align="left"><tt>description</tt></td><td align="left">Описание ошибки.</td></tr><tr align="center"><td align="left"><tt>number</tt></td><td align="left">Содержит 32-битный код ошибки. Старшие два байта (для их выделения воспользуйтесь операцией e.number&gt;&gt;16 &amp; 0x1FFF) содержат вспомогательный код, младшие (для их выделения воспользуйтесь операцией e.number &amp; 0xFFFF) код ошибки.</td></tr></table><br><a name="example12"></a><table class="example"><caption>Пример #3.  Обработка ошибок </caption><tr><td colspan="2"><p> При загрузке следующей страницы сценарий отображает диалоговое окно с подтверждением распечатать свойства объекта-абзаца <tt>par1</tt>. Если пользователь отвечает <strong>Да</strong>, то возникает ошибка, так как к тому времени, когда в сценарии будет выполняться обращение к объекту <tt>par1</tt>, он еще не будет создан - тело документа к этому моменту еще не обработано. </p><p> Оператор <tt>if</tt> сценария заключен в блок <tt>try</tt>. Поэтому управление будет передано в блок catch, в котором будут распечатаны свойства сгенерированного объекта <tt>Error</tt> - переменная <tt>e</tt>. При этом обязательно выполнится оператор блока <tt>finally</tt>. </p><p> Если пользователь отвечает <strong>Нет</strong>, то ошибки не возникает, так как не будет обращения к объекту <tt>par1</tt>, операторы блока <tt>catch</tt> выполняться не будут, но блока <tt>finally</tt> выполнится обязательно. </p><dir><pre>
&lt;script&gt;
 reply = confirm("Распечатать содержимое абзаца par1?")
 try{
  if(reply){
   alert(par1.innerText);
  }
 }catch(e){
  alert("Название ошибки: "+e.name + "\n"+
        "Сообщение ошибки: "+e.message + "\n"+
        "32-битный код ошибки: "+e.number+"\n"+
        "Вспомогательный код ошибки: "+
                 (e.number&gt;&gt;16 &amp; 0x1FFF) +"\n" +
        "Истинный код ошибки: "+
                 (e.number &amp; 0xFFFF) +"\n" +
        "Описание ошибки: "+e.description)
 }finally{
  alert("Код блока finally выполняется всегда!")
 }
&lt;/script&gt;
&lt;body&gt;
&lt;p id=par1&gt;
Абзац с атрибутом id='par1'.
&lt;/p&gt;
&lt;/body&gt;
       </pre></dir></td></tr></table><p> Также возможна ситуация, когда не требуется немедленно обрабатывать ошибку, а передать ее на обработку в процедуру более высокого уровня. Для этого следует инициировать собственную ошибку, которая будет перехвачена на более высоком уровне или просто отображена для пользователя. Для инициирования ошибки используется оператор <tt>throw</tt>, единственным параметром которого является некоторое выражение. В этом случае можно задать строку с описанием ошибки или некоторый ее номер. Но более распространенным способом в этой ситуации является создание объекта <tt>Error</tt>, который передается оператору <tt>throw</tt> как параметр. </p><a name="example13"></a><table class="example"><caption>Пример #4.  Генерирование ошибки </caption><tr><td colspan="2"><p> В этом сценарии функция <tt>add()</tt> (сложение двух чисел) проверяет количество переданных в нее параметров. Если фактических параметров меньше двух, то функция сама не обрабатывает эти ошибки в своем теле, а генерирует ошибку, передавая ее в код, вызывающий эту функцию, который ее и обрабатывает. </p><dir><pre>
&lt;script&gt;
// Функция, генерирующая ошибку
function add(x,y){
// Создание объекта Error
   var err = new Error()
  switch(arguments.length){
   case 0:
// Создание ошибки с кодом 800
    err.number = 800
    err.description = "Параметров должно быть два.";
// Генерирование ошибки
    throw err
   break;
   case 1:
// Создание ошибки с кодом 801
    err.number = 801
    err.description = "Не задан второй параметр.";
// Генерирование ошибки
    throw err
   break;
  }
// Возвращаемое значение функции
  return x+y;
}

// Обращение к функции add() с обработкой возможной ошибки
try{
// функция add() сгенерирует ошибку с номером 801
 alert(add(5))
}
catch(e){
 alert(e.description+"\n"+e.number)
}

&lt;/script&gt;
      </pre></dir></td></tr></table><br><a name="exercise1"></a><table class="exercise"><caption>Упражнение #1. </caption><tr class="exercise"><td><p> Добавить метод <tt>propList()</tt> (пример 10) к прототипу объекта <tt>Object</tt>, а также добавить к прототипу этого же объекта свойство <tt>list</tt> со значением "Добавленное к прототипу Object". Проверить на объектах  <tt>String</tt>, <tt>Date</tt>, <tt>Number</tt>, <tt>Function</tt>, <tt>Array</tt>, <tt>Boolean</tt>, действительно ли будут добавляться к экземплярам указанных объектов добавленные к прототипу объекта <tt>Object</tt> метод и свойство. </p></td></tr></table><br><a name="exercise2"></a><table class="exercise"><caption>Упражнение #2. </caption><tr class="exercise"><td><p> Добавить к прототипу объекта  <tt>Array</tt> метод вычисления максимального элемента массива и посмотреть его работу на экземплярах объектов этого типа, содержащими только числовые элементы, только строковые и смешанные (числа и строки). </p></td></tr></table><br><a name="exercise3"></a><table class="exercise"><caption>Упражнение #3. </caption><tr class="exercise"><td><p> Создать массив, элементы которого хранят ссылки на все 6 типов встроенных объектов JavaScript. Случайным образом "перемешать" его элементы. После этого распечатать отчет о том, какие объекты хранятся в его элементах, начиная с первого. </p></td></tr></table><br><a name="exercise4"></a><table class="exercise"><caption>Упражнение #4. </caption><tr class="exercise"><td><p> Реализовать нижеприведенный сценарий. Проверить доступность свойств 0, 1, 2, 3 массива. Объяснить результаты. Поэкспериментировать с другими типами встроенных объектов. </p><dir><pre>
var a = new Array("apple", "banana", "cactus");
    a["q"] = 9
document.write(a.propertyIsEnumerable("q"))
    </pre></dir></td></tr></table><br><a name="exercise5"></a><table class="exercise"><caption>Упражнение #5. </caption><tr class="exercise"><td><p> Отобразить на странице HTML таблицу, показывающую результаты выполнения методов <tt>toString</tt> и  <tt>valueOf</tt> всех встроенных объектов JavaScript. </p></td></tr></table><br><a name="exercise6"></a><table class="exercise"><caption>Упражнение #6. </caption><tr class="exercise"><td><p> Разработать страницу HTML со встроенным сценарием, который получает введенный пользователем код JavaScript в текстовом поле страницы и выполняет его. </p><p> Получить строку из текстового поля страницы HTML </p><dir><pre>
&lt;input name=txt1 type=text size=40&gt;
    </pre></dir><p> можно, используя свойство <tt>value</tt> объекта с идентификатором, равным значению атрибута name текстового поля </p><dir><pre>
fromText = txt1.value
    </pre></dir><p> Интерпретацию строки можно организовать, используя кнопку </p><dir><pre>
&lt;input type=button value="Интерпретировать" onclick="eval(txt1.value)"&gt;
    </pre></dir></td></tr></table><br><a name="exercise7"></a><table class="exercise"><caption>Упражнение #7. </caption><tr class="exercise"><td><p> Написать сценарий, который кодирует строку, содержащую все небуквенные символы клавиатуры тремя возможными способами и отобразить результаты в виде таблицы: </p><table cellspacing="0" cellpadding="2" border="1"><tr align="center"><th>Символ</th><th>escape</th><th>encodeURI</th><th>encodeURIComponent</th></tr><tr align="center"><td>&nbsp;</td><td>%20</td><td>%20</td><td>%20</td></tr><tr align="center"><td>`</td><td>%60</td><td>%60</td><td>%60</td></tr><tr align="center"><td>~</td><td>%7E</td><td>~</td><td>~</td></tr><tr align="center"><td>!</td><td>%21</td><td>!</td><td>!</td></tr><tr align="center"><td>@</td><td>@</td><td>@</td><td>%40</td></tr><tr align="center"><td>#</td><td>%23</td><td>#</td><td>%23</td></tr><tr align="center"><td colspan="4">...</td></tr></table><br></td></tr></table><br><table cellspacing="0" align="center" width="90%" border="0"><tr><td align="left"><a href="index-7.html" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l7/index.html">&lt;&lt;&lt; Предыдущий урок</a></td><td align="right"><a href="index-11.html" tppabs="http://ips.ifmo.ru/courses/webprog/part1/l9/index.html">Следующий урок &gt;&gt;&gt;</a></td></tr></table><br><br><br></td></tr></table><br></td><td background="dot.gif" tppabs="http://ips.ifmo.ru/img/dot.gif" width="1"><img width="1" src="spacer.gif" tppabs="http://ips.ifmo.ru/img/spacer.gif" height="157"></td></tr><tr><td class="lmenu" width="194" height="9"><font style="font-size:9px;font-family:arial;">Copyright &copy; 2003 IPS</font></td><td colspan="2" align="right"><img src="foot.gif" tppabs="http://ips.ifmo.ru/img/foot.gif"></td></tr></table></td></tr></table></body></html>